#!/bin/bash

# General name for resources
name=${NAME:-cluster}

# AWS S3 bucket to store terraform state files
bucket=${S3BUCKET:-pure-ci}
# AWS S3 bucket's region
region=${S3REGION:-eu-west-1}

usage () {
    echo; echo "Usage: $0 <prod|test> [extra terraform opts]"; echo
}

die () {
    echo; echo "ERROR: $1"; echo; exit 1
}

if [ $# -eq 0 ]; then usage; exit 1; fi

case "$1" in
    prod) stage="prod" ;;
    test) stage="test" ;;
    *) usage && die "Unknow argument!" ;;
esac

if [ -z  $AWS_ACCESS_KEY_ID ];     then die "Please specify AWS credentials - AWS_ACCESS_KEY_ID variable empty"; fi
if [ -z  $AWS_SECRET_ACCESS_KEY ]; then die "Please specify AWS credentials - AWS_SECRET_ACCESS_KEY variable empty"; fi

goal=$1
shift 1
extraopts=$*
exitcode=0
curdir=$(pwd)

cd config/$goal
# initialize remote storage
if [ ! -f .terraform/terraform.tfstate ]
  then
    echo "Set Terraform remote S3 state"
    terraform remote config \
      -backend=s3 \
      -backend-config="bucket=$bucket" \
      -backend-config="region=$region" \
      -backend-config="key=${name}.${stage}.tfstate"
    exitcode=$?
  else
    echo "Pull Terraform remote S3 state"
    terraform remote pull
    exitcode=$?
fi

if [ $exitcode -ne 0 ]; then die "terraform can't sync remote state"; fi

# Apply changes
terraform get ../../tf || exitcode=$?
terraform apply $extraopts ../../tf || exitcode=$?
terraform remote push || exitcode=$?

if [ $exitcode -ne 0 ]; then die "terraform got error wile apply changes"; fi

cd $curdir
echo "Done."
